============================= test session starts ==============================
platform linux -- Python 3.6.9, pytest-5.2.1, py-1.8.0, pluggy-0.13.0
rootdir: /devito, inifile: setup.cfg
plugins: nbval-0.9.3, cov-2.7.1
collected 912 items / 2 skipped / 910 selected

tests/test_adjoint.py ..........................                         [  2%]
tests/test_autotuner.py ..........s....                                  [  4%]
tests/test_builtins.py ....s.s.s                                         [  5%]
tests/test_caching.py ..................................                 [  9%]
tests/test_checkpointing.py .......                                      [  9%]
tests/test_constant.py .                                                 [ 10%]
tests/test_data.py ..........................sssssssssssssss.ss..        [ 15%]
tests/test_dependency_bugs.py .                                          [ 15%]
tests/test_derivatives.py .............................................. [ 20%]
........................................................................ [ 28%]
.........................................................F...F.......... [ 36%]
......                                                                   [ 36%]
tests/test_differentiable.py ..                                          [ 36%]
tests/test_dimension.py ...............................                  [ 40%]
tests/test_dle.py ...................................................... [ 46%]
.........................................                                [ 50%]
tests/test_docstrings.py ................                                [ 52%]
tests/test_dse.py ......x............................................... [ 58%]
.......................s....                                             [ 61%]
tests/test_gradient.py ....                                              [ 61%]
tests/test_interpolation.py ........................                     [ 64%]
tests/test_ir.py ....................................................... [ 70%]
................                                                         [ 72%]
tests/test_mpi.py ssssssssssssssssssssssssssssssssssssssssssssssssssssss [ 78%]
ss                                                                       [ 78%]
tests/test_operator.py ................................................. [ 83%]
........................................................................ [ 91%]
..................                                                       [ 93%]
tests/test_pickle.py .................ss.                                [ 95%]
tests/test_resample.py .                                                 [ 96%]
tests/test_save.py ..                                                    [ 96%]
tests/test_subdomains.py ...                                             [ 96%]
tests/test_symbolic_coefficients.py .....F                               [ 97%]
tests/test_timestepping.py .......                                       [ 98%]
tests/test_tools.py .....                                                [ 98%]
tests/test_tti.py ....                                                   [ 99%]
tests/test_visitors.py .........                                         [100%]

=================================== FAILURES ===================================
____________________ TestFD.test_fd_adjoint[dx2-dx2-1-1-12] ____________________

self = <test_derivatives.TestFD object at 0x7ff170723208>, so = 12, ndim = 1
derivative = 'dx2', adjoint_name = 'dx2', adjoint_coeff = 1

    @pytest.mark.parametrize('so', [2, 4, 8, 12])
    @pytest.mark.parametrize('ndim', [1, 2])
    @pytest.mark.parametrize('derivative, adjoint_name, adjoint_coeff', [
        ('dx', 'dx', -1),
        ('dx2', 'dx2', 1),
        ('dxl', 'dxr', -1),
        ('dxr', 'dxl', -1)])
    def test_fd_adjoint(self, so, ndim, derivative, adjoint_name, adjoint_coeff):
        grid = Grid(shape=tuple([51]*ndim), extent=tuple([25]*ndim))
        x = grid.dimensions[0]
        f = Function(name='f', grid=grid, space_order=so)
        f_deriv = Function(name='f_deriv', grid=grid, space_order=so)
        g = Function(name='g', grid=grid, space_order=so)
        g_deriv = Function(name='g_deriv', grid=grid, space_order=so)
    
        # Fill f and g with smooth cos/sin
        Operator([Eq(g, cos(2*np.pi*x/5)), Eq(f, sin(2*np.pi*x/8))]).apply()
        # Check symbolic expression are expected ones for the adjoint .T
        deriv = getattr(f, derivative)
        expected = adjoint_coeff * getattr(f, adjoint_name).evaluate
        assert deriv.T.evaluate == expected
    
        # Compute numerical derivatives and verify dot test
        #  i.e <f.dx, g> = <f, g.dx.T>
    
        eq_f = Eq(f_deriv, deriv)
        eq_g = Eq(g_deriv, getattr(g, derivative).T)
    
        op = Operator([eq_f, eq_g])
        op()
    
        a = np.dot(f_deriv.data.reshape(-1), g.data.reshape(-1))
        b = np.dot(g_deriv.data.reshape(-1), f.data.reshape(-1))
>       assert np.isclose(1 - a/b, 0, atol=1e-5)
E       assert False
E        +  where False = <function isclose at 0x7ff19ca7d1e0>((1 - (0.22231627 / 0.2223134)), 0, atol=1e-05)
E        +    where <function isclose at 0x7ff19ca7d1e0> = np.isclose

tests/test_derivatives.py:394: AssertionError
----------------------------- Captured stderr call -----------------------------
Operator `Kernel` run in 0.01 s
Operator `Kernel` run in 0.01 s
------------------------------ Captured log call -------------------------------
INFO     Devito:logger.py:121 Operator `Kernel` run in 0.01 s
INFO     Devito:logger.py:121 Operator `Kernel` run in 0.01 s
____________________ TestFD.test_fd_adjoint[dx2-dx2-1-2-12] ____________________

self = <test_derivatives.TestFD object at 0x7ff15f9c6a58>, so = 12, ndim = 2
derivative = 'dx2', adjoint_name = 'dx2', adjoint_coeff = 1

    @pytest.mark.parametrize('so', [2, 4, 8, 12])
    @pytest.mark.parametrize('ndim', [1, 2])
    @pytest.mark.parametrize('derivative, adjoint_name, adjoint_coeff', [
        ('dx', 'dx', -1),
        ('dx2', 'dx2', 1),
        ('dxl', 'dxr', -1),
        ('dxr', 'dxl', -1)])
    def test_fd_adjoint(self, so, ndim, derivative, adjoint_name, adjoint_coeff):
        grid = Grid(shape=tuple([51]*ndim), extent=tuple([25]*ndim))
        x = grid.dimensions[0]
        f = Function(name='f', grid=grid, space_order=so)
        f_deriv = Function(name='f_deriv', grid=grid, space_order=so)
        g = Function(name='g', grid=grid, space_order=so)
        g_deriv = Function(name='g_deriv', grid=grid, space_order=so)
    
        # Fill f and g with smooth cos/sin
        Operator([Eq(g, cos(2*np.pi*x/5)), Eq(f, sin(2*np.pi*x/8))]).apply()
        # Check symbolic expression are expected ones for the adjoint .T
        deriv = getattr(f, derivative)
        expected = adjoint_coeff * getattr(f, adjoint_name).evaluate
        assert deriv.T.evaluate == expected
    
        # Compute numerical derivatives and verify dot test
        #  i.e <f.dx, g> = <f, g.dx.T>
    
        eq_f = Eq(f_deriv, deriv)
        eq_g = Eq(g_deriv, getattr(g, derivative).T)
    
        op = Operator([eq_f, eq_g])
        op()
    
        a = np.dot(f_deriv.data.reshape(-1), g.data.reshape(-1))
        b = np.dot(g_deriv.data.reshape(-1), f.data.reshape(-1))
>       assert np.isclose(1 - a/b, 0, atol=1e-5)
E       assert False
E        +  where False = <function isclose at 0x7ff19ca7d1e0>((1 - (11.3381815 / 11.338006)), 0, atol=1e-05)
E        +    where <function isclose at 0x7ff19ca7d1e0> = np.isclose

tests/test_derivatives.py:394: AssertionError
----------------------------- Captured stderr call -----------------------------
Operator `Kernel` run in 0.01 s
/tmp/devito-jitcache-uid0/eef4d81cb97672165f9c867b35ecef3116800d37.c: In function ‘Kernel’:
/tmp/devito-jitcache-uid0/eef4d81cb97672165f9c867b35ecef3116800d37.c:39: warning: ignoring #pragma omp simd [-Wunknown-pragmas]
     #pragma omp simd aligned(f,f_deriv,g,g_deriv:32)
 
Operator `Kernel` run in 0.01 s
------------------------------ Captured log call -------------------------------
INFO     Devito:logger.py:121 Operator `Kernel` run in 0.01 s
INFO     Devito:logger.py:121 Operator `Kernel` run in 0.01 s
______________________ TestSC.test_function_coefficients _______________________

self = <test_symbolic_coefficients.TestSC object at 0x7ff15cd436a0>

    def test_function_coefficients(self):
        """Test that custom function coefficients return the expected result"""
        so = 2
        grid = Grid(shape=(4, 4))
        f0 = TimeFunction(name='f0', grid=grid, space_order=so, coefficients='symbolic')
        f1 = TimeFunction(name='f1', grid=grid, space_order=so)
        x, y = grid.dimensions
    
        s = Dimension(name='s')
        ncoeffs = so+1
    
        wshape = list(grid.shape)
        wshape.append(ncoeffs)
        wshape = as_tuple(wshape)
    
        wdims = list(grid.dimensions)
        wdims.append(s)
        wdims = as_tuple(wdims)
    
        w = Function(name='w', dimensions=wdims, shape=wshape)
        w.data[:, :, 0] = -0.5/grid.spacing[0]
        w.data[:, :, 1] = 0.0
        w.data[:, :, 2] = 0.5/grid.spacing[0]
    
        f_x_coeffs = Coefficient(1, f0, x, w)
    
        subs = Substitutions(f_x_coeffs)
    
        eq0 = Eq(f0.dt + f0.dx, 1, coefficients=subs)
        eq1 = Eq(f1.dt + f1.dx, 1)
    
        stencil0 = solve(eq0.evaluate, f0.forward)
        stencil1 = solve(eq1.evaluate, f1.forward)
    
        op0 = Operator(Eq(f0.forward, stencil0))
        op1 = Operator(Eq(f1.forward, stencil1))
    
        op0(time_m=0, time_M=5, dt=1.0)
        op1(time_m=0, time_M=5, dt=1.0)
    
>       assert np.all(np.isclose(f0.data[:] - f1.data[:], 0.0, atol=1e-5, rtol=0))
E       assert Data(False)
E        +  where Data(False) = <function all at 0x7ff19ca90d90>(Data([[[ True,  True,  True,  True],\n       [False, False, False, False],\n       [ True,  True,  True,  True],\n       ...True],\n       [ True,  True,  True,  True],\n       [ True,  True,  True,  True],\n       [ True,  True,  True,  True]]]))
E        +    where <function all at 0x7ff19ca90d90> = np.all
E        +    and   Data([[[ True,  True,  True,  True],\n       [False, False, False, False],\n       [ True,  True,  True,  True],\n       ...True],\n       [ True,  True,  True,  True],\n       [ True,  True,  True,  True],\n       [ True,  True,  True,  True]]]) = <function isclose at 0x7ff19ca7d1e0>((Data([[[-11.4375 , -11.4375 , -11.4375 , -11.4375 ],\n       [ 49.59375,  49.59375,  49.59375,  49.59375],\n       [ -6....    [-24.25   , -24.25   , -24.25   , -24.25   ],\n       [ -1.9375 ,  -1.9375 ,  -1.9375 ,  -1.9375 ]]], dtype=float32) - Data([[[-11.437502 , -11.437502 , -11.437502 , -11.437502 ],\n       [ 49.59374  ,  49.59374  ,  49.59374  ,  49.59374 ....249996 , -24.249996 , -24.249996 ],\n       [ -1.9375012,  -1.9375012,  -1.9375012,  -1.9375012]]],\n     dtype=float32)), 0.0, atol=1e-05, rtol=0)
E        +      where <function isclose at 0x7ff19ca7d1e0> = np.isclose

tests/test_symbolic_coefficients.py:96: AssertionError
----------------------------- Captured stderr call -----------------------------
/tmp/devito-jitcache-uid0/28a0c1d4f6f5711828a8c4cd1ff27eaa7607404e.c: In function ‘Kernel’:
/tmp/devito-jitcache-uid0/28a0c1d4f6f5711828a8c4cd1ff27eaa7607404e.c:39: warning: ignoring #pragma omp simd [-Wunknown-pragmas]
       #pragma omp simd aligned(f0,w:32)
 
Operator `Kernel` run in 0.01 s
/tmp/devito-jitcache-uid0/b4ec5c37d966771de3236dbb40d450f5a48d787b.c: In function ‘Kernel’:
/tmp/devito-jitcache-uid0/b4ec5c37d966771de3236dbb40d450f5a48d787b.c:38: warning: ignoring #pragma omp simd [-Wunknown-pragmas]
       #pragma omp simd aligned(f1:32)
 
Operator `Kernel` run in 0.01 s
------------------------------ Captured log call -------------------------------
INFO     Devito:logger.py:121 Operator `Kernel` run in 0.01 s
INFO     Devito:logger.py:121 Operator `Kernel` run in 0.01 s
======= 3 failed, 828 passed, 82 skipped, 1 xfailed in 830.53s (0:13:50) =======
